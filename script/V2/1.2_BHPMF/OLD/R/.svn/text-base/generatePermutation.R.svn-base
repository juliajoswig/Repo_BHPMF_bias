
generatePermutation <- function (noTraits, traitIds, numFolds, testFlag){

	numObs = length(noTraits);
	permutMatV = matrix(numeric(0), nrow = numObs, ncol = numFolds);
    if (testFlag){
    
    
        permutMatTest = matrix(numeric(0), nrow = numObs, ncol = numFolds);
		
        #generate all test, and validation
        for (id in 1 : numObs){
		#	print(id)
            permt <- c()
            permv <- c()

            while (length(permt) < numFolds){
                
                traitId = traitIds[[id]];                
                len = length(traitId);
                if(len == 1){
					permt = rep(traitId, numFolds);
					permv = rep(traitId, numFolds);
					break
				}
				else{
					ranPermT = sample(traitId, len, replace=FALSE);
					ranPermV = c(ranPermT[2: len], ranPermT[1]);
				
					permt = c(permt, ranPermT);
					permv = c(permv, ranPermV );
				}
                
            }
            
            permutMatTest[id,] = permt[1:numFolds];
            permutMatV[id,] = permv[1:numFolds];

#            permutMatTest = rbind( permutMatTest, permt[1:numFolds] );
#            permutMatV = rbind( permutMatV, permv[1:numFolds] );
        }

    }
    else{
		permutMatTest = matrix(numeric(0), nrow = 0, ncol = numFolds);
        #generate only validation permutation
        for (id in 1 : length(noTraits)){

            permv = c();
            
            
            while (length(permv) < numFolds){
                
                traitId = traitIds[[id]];                
                len = length(traitId);
                if(len == 1){
					permv = rep(traitId, numFolds);
					break
				}
				else{
					ranPermV = sample(traitId, len, replace=FALSE);					
					permv = c(permv, ranPermV );
				}
                
            }

            permutMatV[id,] = permv[1:numFolds];
#            permutMatV = permutMatV = rbind( permutMatV, permv[1:numFolds] );
            
        }
    }
    
    return(list(permutMatTest, permutMatV));

}




