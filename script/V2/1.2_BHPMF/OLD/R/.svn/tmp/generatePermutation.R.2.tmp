
generatePermutation <- function (noTraits, traitIds, numFolds, testFlag){

    permutMatTest = matrix(numeric(0), nrow = 0, ncol = numFolds);
    permutMatV = matrix(numeric(0), nrow = 0, ncol = numFolds);

    if (testFlag){
        #generate all test, and validation
        for (id  in 1 : length(noTraits)){

            permt <- c()
            permv <- c()

            while (length(permt) < numFolds){
                
                traitId = traitIds[[id]];                
                len = length(traitId);
                ranPermT = sample(traitId, len, replace=FALSE);
                ranPermV = c(ranPermT[2: len], ranPermT[1]);
                permt = c(permt, ranPermT);
                permv = c(permv, ranPermV );
                
            }

            permutMatTest = rbind( permutMatTest, permt[1:numFolds] );
            permutMatV = rbind( permutMatV, permv[1:numFolds] );
        }

    }
    else{

        #generate only validation permutation
        for (id in 1 : length(noTraits)){

            permv = c();

            while (length(permv) <= numFolds){
                
                traitId = traitIds[[id]];
                len = length(traitId);
                ranPermV = sample(traitId, len, replace=FALSE);
                permv = c(permv, ranPermV);
        
            }

            permutMatV = permutMatV = rbind( permutMatV, permv[1:numFolds] );
            
        }
    }
    
    return(list(permutMatTest, permutMatV));

}




