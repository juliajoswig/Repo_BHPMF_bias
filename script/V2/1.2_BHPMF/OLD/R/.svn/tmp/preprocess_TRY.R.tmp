append.Rda <- function (variables, file)
{
    old.objects <- load(file, new.env())
    print(old.objects)
    print(deparse(substitute(variables)))
    save(list = c(old.objects, variables),
    file = file)
}

source("countNumTraits.R")
source("generatePermutation.R")
source("splitData.R")

library(Matrix)

numDatasets = 3;


traitNames <- c( 'SLA', 'PlantHeight', 'SeedMass', 'LDMC', 'StemSpecificDensity', 'LeafArea', 'LeafN', 'LeafP', 'Leaf nitrogen (N) content per area', 'Leaf fresh mass', 'Leaf nitrogen/phosphorus (N/P) ratio', 'Leaf carbon (C) content per dry mass', 'Leaf delta 15N');

negTraitNames <- c('Leaf delta 15N');


dataPath <- "../data";
fileName <- paste(dataPath, "/treeIds.txt", sep="");
treeIds <- as.matrix(read.table(fileName));

fileName <- paste(dataPath, "/traitInfo.txt", sep="");
traitInfo <- as.matrix(read.table(fileName, sep = "\t"));

traitInfo <- traitInfo[, 2:ncol(traitInfo)];

#transform X(15N) = X(15N) + abs(min(X(15N))) + 1 : to have all positive values
indNeg <- which(traitNames == negTraitNames); #find index of 15N
idx <- which(!is.na(traitInfo[,indNeg]), arr.ind=TRUE); #find index of non-zero elements
val <- traitInfo[idx, indNeg]; #value of nonzero elements of 15N
mm  <- abs(min(val)) +1; 
val <- val + mm; #transform it
val[is.infinite(val)] <- mm;
traitInfo[idx, indNeg] <- val;
X <- traitInfo; #[, 2:ncol(traitInfo)];
rm(traitInfo);



print("countNumTraits")
#noTraits: a vector of size observation containing number of available trait per observation
#indObs:  a vector containing index of observation with at least one available trait
#traitIds: containing index of available trait per observation
res <- countNumTraits(X);
fileName  <- paste(dataPath, "/freqObsNoTraits_pmf.Rda", sep="");
noTraits <- res[[1]];
indObs <- res[[2]];
traitIds <- res[[3]];
save(noTraits, indObs ,traitIds, file=fileName)

#remove observation with no available trait
X <- X[indObs,];
treeIds <- treeIds[indObs, ];


#find non-zero elements
Idx <- which(!is.na(X), arr.ind=TRUE);
val <- X[Idx];

Y <- cbind(Idx, val);
rm(Idx, val);

numTraits <- ncol(X);
logm <- rep(0, times = numTraits);
logs <- rep(0, times = numTraits);
zsLogY <- matrix(numeric(0), nrow = 0, ncol = 3)

print("zsLogY")
#transfer it to zslog
for (traitId in 1:numTraits){

	ii <- which(!is.na(X[, traitId]), arr.ind = TRUE);
	val <- X[ii, traitId];
	logv <- log(val);
	logm[traitId] <- mean(logv); 
	logs[traitId] <- sd(logv);
 
	zxLog <- (logv - logm[traitId]) / logs[traitId];
    
	jj <- rep(traitId, length(ii));

	res <- cbind(ii, jj, zxLog);
	zsLogY <- rbind(zsLogY, res);
    rm(ii, val, jj, res)
}

print(dim(zsLogY))

zsLogX <- sparseMatrix (zsLogY[,1], zsLogY[,2], x=zsLogY[,3])

fileName <-paste(dataPath, "/ProcessedData_pmf.Rda", sep="");
save (zsLogX, zsLogY, X, Y, traitNames, treeIds, logm, logs, file = fileName);
rm(fileName, Idx, jj, val, zxLog, traitId, logv, res);



#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%Split Dataset to training, test, validation set
#%% Similar to CV (10 fold) some data may appear more than once in test set
#%% (not completly disjoint)
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# call generatePermutation
noTraits <- noTraits[indObs];
traitIds <- traitIds[indObs];
fileName <-paste(dataPath, "/permutationMat_pmf.Rda", sep="");


res = generatePermutation(noTraits, traitIds, numDatasets, 1);
permutMatTest = res[[1]];
permutMatV = res[[2]];
rm(res);
save(file = fileName, permutMatTest, permutMatV)

#call splitData
fileName <-paste(dataPath, "/traits_trees_atleastone_", sep="");
treeFile <-paste(dataPath, "/ProcessedData_pmf.Rda", sep="");

res = splitData(permutMatTest, permutMatV, noTraits, X, zsLogX, traitNames, fileName, treeFile, 0, 1);
indValid = res[[1]];
indTest = res[[2]];
indTrain = res[[3]];
rm(res);
fileName <-paste(dataPath, "/permutationMat_pmf.Rda", sep="");

vars = c("indValid", "indTest", "indTrain");
lapply(vars, append.Rda, file = fileName)

#rm(ii3, ii2, jj3, iiValid, jjValid, iiTest, jjTest, jj3Test)







#treeIds = dlmread(['../data/treeIds_', excelfilename, '.txt']);

#filename = ['../data/traitInfo_', excelfilename, '.txt'];
#traitInfo = dlmread(filename, '\t');

#traitInfo(:,1) = [];


#[ii, jj, vv] = find(traitInfo);


#transform X(15N) = X(15N) + abs(min(X(15N))) + 1 : to have all positive values
#ind15N = find(strcmp(traitNames, 'Leaf delta 15N'));
#idx = find(jj == ind15N);
#mm  = abs(min(vv(idx)))+1;
#vv(idx) = vv(idx) + mm;
#id0 = isnan(vv);
#vv(id0) = mm;
#X = full(sparse(ii, jj, vv, size(traitInfo, 1), size(traitInfo, 2)));
#clear traitInfo


#filename = ['../data/freqObsNoTraits_pmf'];

#[noTraits ,indObs ,traitIds, cc] = countNumTraits(X);
#save(filename, 'noTraits', 'cc' ,'indObs' ,'traitIds')

#X = X(indObs,:);
#treeIds = treeIds(indObs, :);


#Y = [ii, jj, vv];
