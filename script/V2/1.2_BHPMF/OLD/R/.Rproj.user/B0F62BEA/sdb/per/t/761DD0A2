{
    "contents" : "# hierarchy.info <- read.table(hierarchy_file_name, sep = \"\\t\")\nPreprocessHierarchy <- function(X, hierarchy.info, tmp.dir) {\nnum.levels <- ncol(hierarchy.info)\nnum.rows <- nrow(hierarchy.info)\n\nlevel.names <- vector(\"list\", num.levels)\nnum.nodes.per.level <- rep(0, num.levels)\nfor(level in 1 : num.levels) {\n\tlevel.names[[num.levels - level + 1]] <- sort(unique(hierarchy.info[, level]))\n\tnum.nodes.per.level[num.levels - level + 1] <- length(level.names[[num.levels - level + 1]])\n}\nsum.num.nodes.per.level <- sum(num.nodes.per.level)\n\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#change the string names to index\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  \nhierarchy.info.idx <- matrix(numeric(0), num.rows, num.levels - 1);\n\nhierarchy.info.data.frame <- as.data.frame(hierarchy.info)\nfor(level in seq(1,num.levels-1, by=1)) {\n\t  tmp.str <- c(hierarchy.info.data.frame[, level+1])\n\t  hierarchy.info.idx[, level] <- c(tmp.str);\n}\n\nfile.name <- paste(tmp.dir, '/processed_hierarchy_info.Rda', sep=\"\");\nsave(file = file.name, list = c('hierarchy.info.idx', 'level.names', 'hierarchy.info' ,'num.nodes.per.level'))\n\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#find phylo info at higher levels\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nindex <- 1:num.rows\nold.child.info <- c(0)\n\nnum.children <- rep(0, sum.num.nodes.per.level)\nnum.parent <- rep(1, sum.num.nodes.per.level)\nparent <- rep(0, sum.num.nodes.per.level)\n\nstart.ind <- sum(num.nodes.per.level[1 : num.levels - 1]) + 1\nlast.ind <- start.ind + num.rows - 1\nparent[start.ind:last.ind] <- hierarchy.info.idx[, 1]\n\nfor (level in seq(num.levels - 1, 2, by = -1)) {\n\tstart.ind = sum(num.nodes.per.level[1:level-1])\n\tlen = length(level.names[[level]])\n\tnew.child.info <- rep(0, length(level.names[[level-1]]))\n\t# cat(\"level: \", level, \"\\n\")\n\tfor (ind in 1 : len) {\n        idx <- index[hierarchy.info.idx[, num.levels-level] == ind];  # index of all children belong to this node.\n\t\tpar.id <- unique(hierarchy.info.idx[idx, num.levels - level + 1])  # check if genus information is unique.\n\t\tif (length(par.id) > 1) {\n\t\t\tprint(paste(\"Error in Hierarchy: node '\",level.names[[leve]][ind], \"' at level \", level, \" belongs to more than one parent (group) :\"))\n\t\t\tprint(paste(level.names[[level-1]][par.id]))\n\t\t\tbreak\n\t\t}\n\t\n\t\tstart.ind <- start.ind + 1\n\t\t#add number of children\n\t\tif (level == num.levels-1) {\n\t\t\tnum.children[start.ind] <- length(idx)\n\t\t} else {\n\t\t\tnum.children[start.ind] <- old.child.info[ind]\n\t\t}\n\t\t# cat(ind, \"\\t\")\n\t\t# cat(\"par.id: \" , par.id, \"\\n\")\n\t\tnum.parent[start.ind] <- 1\t\t\n\t\tparent[start.ind] <- par.id\t\t\n\t\tnew.child.info[par.id] <- new.child.info[par.id] + 1\n\t}\n\trm(old.child.info)\n\told.child.info <- new.child.info\n}\n\nnum.parent[1:num.nodes.per.level[1]] <- 0\nnum.children[1:num.nodes.per.level[1]] <- old.child.info\n\nfile.name = paste(tmp.dir, \"/num_parents.txt\", sep = \"\")\nwrite.table(num.parent, file = file.name, sep = \"\\t\", col.names = F, row.names = F)\n\nfile.name = paste(tmp.dir, \"/num_children.txt\", sep=\"\")\nwrite.table(num.children, file = file.name, sep = \"\\t\", col.names = F, row.names = F)\n\nfile.name = paste(tmp.dir, \"/hierarchy_info.txt\", sep=\"\")\nwrite.table(parent, file = file.name, sep = \"\\t\", col.names = F, row.names = F)\n}",
    "created" : 1439281038266.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2837457401",
    "id" : "761DD0A2",
    "lastKnownWriteTime" : 1438584644,
    "path" : "M:/projects/FDiversity/hierarchy/hpmf_method_paper/scripts/HPMF_v1.6/R/findPhyloInfo.R",
    "project_path" : "findPhyloInfo.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}